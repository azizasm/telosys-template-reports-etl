#parse("include/var_entity.vm")
package my.mimos.tpcohcis.report.nontpchims.${entityInstance}.generate.service;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Timestamp;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.Transactional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import my.mimos.tpcohcis.report.nontpchims.${entityInstance}.generate.dto.${entityClass}Dto;
import my.mimos.tpcohcis.report.nontpchims.${entityInstance}.generate.model.${entityClass};
import my.mimos.tpcohcis.report.nontpchims.${entityInstance}.generate.repository.${entityClass}Repository;

/**
 * @author krao.kamma
 *
 */

@Service
public class ${entityClass}Service {
	
	final Logger LOG = LoggerFactory.getLogger(${entityClass}Service.class);

	@Autowired
	private ${entityClass}Repository ${entityInstance}Repository;

	@PersistenceContext
	private EntityManager entityManager;

	@Transactional
	public List<${entityClass}Dto> getDataReportDetails(Timestamp from, Timestamp to , Integer facilityId, Integer districtId, Integer stateId ) {

	  List<${entityClass}Dto> dtoList = new ArrayList<${entityClass}Dto>();
		List<Object[]> ${entityInstance}DtoLists = new ArrayList<Object[]>(0);
		if(null != facilityId){
		    ${entityInstance}DtoLists = ${entityInstance}Repository.findByYearAndMonthAndClinic( from, to , facilityId.longValue() );
		}
		else if(null != districtId && null != stateId){
		    ${entityInstance}DtoLists = ${entityInstance}Repository.findByYearAndMonthAndDistrict(from , to, districtId.longValue(), stateId.longValue());
		}else if(null != stateId && null== districtId){
		    ${entityInstance}DtoLists = ${entityInstance}Repository.findByYearAndMonthAndState(from, to, stateId.longValue());
		}
		
		if(null != ${entityInstance}DtoLists && !${entityInstance}DtoLists.isEmpty()){
          		for (Object[] obj : ${entityInstance}DtoLists) {
          		  ${entityClass}Dto dto = new ${entityClass}Dto();

				#foreach($field in $entity.nonKeyAttributes)
				#if ($field.setter)    
					dto.${field.setter}(get${field.type}(obj[$foreach.index]));
				#end
				#end 

          		  dtoList.add(dto);
        		}
		}
		return dtoList;
	}
	
	private Long addValues(Long ... fieldValues ) {
		Long total=0L;
		for(Long fieldValue: fieldValues){
		    if(null != fieldValue){
			total = total + fieldValue;
		    }
		}
		return total;
	}	 
	
	private String getString(Object object) {
		String result = "";
		if (null != object && object.getClass().getClass().isInstance(String.class)) {
		    result = object.toString();
		}
		return result;
	  }

	  private Long getLong(Object object) {
		Long result = 0L;
		if (null != object && object instanceof BigDecimal) {
		    result = ((Number) object).longValue();
		} else if (null != object && object instanceof BigInteger) {
		    BigInteger resulti = (BigInteger) object;
		    result = resulti.longValue();
		} else if (null != object && object instanceof Integer) {
		    Integer resulti = (Integer) object;
		    result = resulti.longValue();
		}
		return result;
	  }
}
