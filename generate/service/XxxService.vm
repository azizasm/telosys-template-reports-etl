#parse("include/var_entity.vm")
package my.mimos.tpcohcis.report.nontpchims.${entityInstance}.generate.service;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Timestamp;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.Transactional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import my.mimos.tpcohcis.report.nontpchims.${entityInstance}.generate.dto.${entityClass}Dto;
import my.mimos.tpcohcis.report.nontpchims.${entityInstance}.generate.model.${entityClass};
import my.mimos.tpcohcis.report.nontpchims.${entityInstance}.generate.repository.${entityClass}Repository;

/**
 * @author krao.kamma
 *
 */

@Service
public class ${entityClass}Service {
	
	final Logger LOG = LoggerFactory.getLogger(${entityClass}Service.class);

	@Autowired
	private ${entityClass}Repository ${entityInstance}Repository;

	@PersistenceContext
	private EntityManager entityManager;

	@Transactional
	public List<${entityClass}Dto> getDataReportDetails(Timestamp from, Timestamp to , Integer facilityId, Integer districtId, Integer stateId ) {

	  List<${entityClass}Dto> dtoList = new ArrayList<${entityClass}Dto>();
		List<Object[]> ${entityInstance}DtoLists = new ArrayList<Object[]>(0);
		if(null != facilityId){
		    ${entityInstance}DtoLists = ${entityInstance}Repository.findByYearAndMonthAndClinic( from, to , facilityId.longValue() );
		}
		else if(null != districtId && null != stateId){
		    ${entityInstance}DtoLists = ${entityInstance}Repository.findByYearAndMonthAndDistrict(from , to, districtId.longValue(), stateId.longValue());
		}else if(null != stateId && null== districtId){
		    ${entityInstance}DtoLists = ${entityInstance}Repository.findByYearAndMonthAndState(from, to, stateId.longValue());
		}
		
		if(null != ${entityInstance}DtoLists && !${entityInstance}DtoLists.isEmpty()){
          		for (Object[] obj : ${entityInstance}DtoLists) {
          		  ${entityClass}Dto dto = new ${entityClass}Dto();

				#foreach($field in $entity.nonKeyAttributes)
				#if ($field.setter)    
					dto.${field.setter}(get${field.type}(obj[($velocityCount - $one)]));
				#end
				#end 


/*					
          		  dto.setStateName(getString(obj[0]));
          		  dto.setDistrictName(getString(obj[1]));
          		  dto.setFacilityName(getString(obj[2]));
          		  dto.setOpdAttendance(getLong(obj[3]));
          		  dto.setAge0(getLong(obj[4]));
          		  dto.setAge1(getLong(obj[5]));//D
          		  dto.setAge2(getLong(obj[6]));
          		  dto.setAge3(getLong(obj[7]));//D
          		  dto.setAge4(getLong(obj[8]));
          		  dto.setAge5(getLong(obj[9]));//D
          		  dto.setAge6(getLong(obj[10]));
          		  dto.setAge7(getLong(obj[11]));//D
          		  dto.setAge8(getLong(obj[12]));
          		  dto.setAge9(getLong(obj[13]));//D
          		  dto.setAge10(getLong(obj[14]));
          		  dto.setAge11(getLong(obj[15]));//D
          		  
          		//------OP = OP + Death
          		dto.setAge0(addValues(dto.getAge0(), dto.getAge1()));
          		dto.setAge2(addValues(dto.getAge2(), dto.getAge3()));
          		dto.setAge4(addValues(dto.getAge4(), dto.getAge5()));
          		dto.setAge6(addValues(dto.getAge6(), dto.getAge7()));
          		dto.setAge8(addValues(dto.getAge8(), dto.getAge9()));
          		dto.setAge10(addValues(dto.getAge10(), dto.getAge11()));
          		  
          		  Long totalOpd= addValues(dto.getAge0(), dto.getAge2(), dto.getAge4(), 
          		      dto.getAge6(), dto.getAge8(), dto.getAge10());
          		  Long totalD= addValues(dto.getAge1(), dto.getAge3(), dto.getAge5(),
          		      dto.getAge7(), dto.getAge9(), dto.getAge11());
          		  dto.setTotalD(totalD);
          		  dto.setTotalOpd(totalOpd);
  */        		  	
          		  dtoList.add(dto);
        		}
		}
		return dtoList;
	}
	
	private Long addValues(Long ... fieldValues ) {
		Long total=0L;
		for(Long fieldValue: fieldValues){
		    if(null != fieldValue){
			total = total + fieldValue;
		    }
		}
		return total;
	}	 
	
	private String getString(Object object) {
		String result = "";
		if (null != object && object.getClass().getClass().isInstance(String.class)) {
		    result = object.toString();
		}
		return result;
	  }

	  private Long getLong(Object object) {
		Long result = 0L;
		if (null != object && object instanceof BigDecimal) {
		    result = ((Number) object).longValue();
		} else if (null != object && object instanceof BigInteger) {
		    BigInteger resulti = (BigInteger) object;
		    result = resulti.longValue();
		} else if (null != object && object instanceof Integer) {
		    Integer resulti = (Integer) object;
		    result = resulti.longValue();
		}
		return result;
	  }
}
