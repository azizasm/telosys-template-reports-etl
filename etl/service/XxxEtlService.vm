#parse("include/var_entity.vm")

/**
* Copyright 2016 MIMOS Berhad. All Rights Reserved 
*
* All intellectual properties not limited to patents, trademarks, industrial designs,
* copyrights, know-how including layout of images and contents contained herein 
* belong to MIMOS Berhad. Any reproduction, modification, distribution 
* or republishing materials without prior written consent is prohibited.
*   
* Class name: my.mimos.tpcohcis.report.ohcis.pg101.etl.service.Pg101ETLService
* Description: 
* 
*/

package my.mimos.tpcohcis.report.${groupName}.${entityInstance}.etl.service;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Timestamp;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import my.mimos.tpcohcis.DataETL;
import my.mimos.tpcohcis.report.${groupName}.${entityInstance}.generate.model.${entityClass};
import my.mimos.tpcohcis.report.${groupName}.${entityInstance}.generate.model.${entityClass}SourceRegister;
import my.mimos.tpcohcis.report.${groupName}.${entityInstance}.generate.repository.${entityClass}Repository;
import my.mimos.tpcohcis.report.${groupName}.${entityInstance}.generate.repository.${entityClass}SourceRegisterRepository;
import my.mimos.tpcohcis.report.shared.util.ReportUtil;
import my.mimos.tpcohcis.shared.util.DateUtil;

@Service
public class ${entityClass}EtlService implements DataETL {
  private static final Logger LOGGER = LoggerFactory.getLogger(${entityClass}EtlService.class);

    @Autowired
    ${entityClass}Repository ${entityInstance}Repository;
    
    @PersistenceContext
    private EntityManager entityManager;

    @Autowired
    private ${entityClass}SourceRegisterRepository ${entityInstance}SourceRegisterRepo;

    @Value("$${startbrace}report.configuration.fetchsize${endbrace}")
    private Integer maxFetchSize;
	
    @Override
    public void doETL(LocalDateTime startDate, LocalDateTime endDate) {
	
	StringBuilder strBody=new StringBuilder();

	// TODO : need to change
	strBody.append(" from\n" +
			"TRX_PM_VISIT_ENCOUNTER e\n" +
			"inner join  TRX_CD_COMPONENT co on e.visit_encounter_id=co.visit_encounter_id\n" +
			"inner join TRX_CD_COMPONENT_ITEM ci on co.component_id=ci.component_id\n" +
			"inner join TRX_CD_ENROLMENT el on ( ci.item_id =el.item_id and el.program_enrolment_type_id = 17 ) \n" +
			"inner join TRX_PM_PATIENT_VISIT pv on e.visit_id = pv.visit_id\n" +
			"inner join MST_PM_PATIENT p on p.patient_id =pv.patient_id\n" +
			//"--inner join trx_cd_episode_diagnosis  ed on ed.patient_visit_id =pv.visit_id\n" +
			"LEFT JOIN ref_co_ethnic_group et on p.ethnic_group_ethnic_group_id = et.ethnic_group_id\n" +
			"INNER JOIN ref_co_gender g on p.gender_gender_id = g.gender_id\n" +
			"inner join mst_am_facility f on (pv.clinic_id = f.facility_id)\n" +
			"left outer join (select distinct faa.state_id , faa.district_id , faa.facility_id from mst_am_facility_address faa ) fa on f.facility_id = fa.facility_id\n" +
			"left outer join  ref_co_state sta on fa.state_id=sta.state_id\n" +
			"left outer join  ref_co_district dst on fa.district_id=dst.district_id\n" +
			"left outer join trx_pm_death_information di on pv.patient_id = di.patient_id\n" +
			"left outer join mst_pm_visit_referral vr on pv.referral_id=vr.referral_id\n" +
			"left outer join (\n" +
			"select es.id , es.actual_date, es.status, esp.patient_id , es.activity , es.item_id\n" +
			" from\n" +
			"ref_cd_health_education_session es\n" +
			"inner join ref_cd_health_education_session_patient esp on (es.id = esp.session_id)\n" +
			"inner join TRX_CD_COMPONENT_ITEM ci on (ci.item_id = es.item_id)\n" +
			"where es.education_program_id = 2071 \n" +
			"and es.activity = 'Nasihat Individu'\n" +
			") ess on (p.patient_id = ess.patient_id)\n" +
			"left outer join (\n" +
			"select ppo.patient_id, d.generic_drug_name as nicotine_drug  from mst_om_prescription_patient_order ppo\n" +
			"join mst_om_prescription_order po on ppo.patient_order_id = po.patient_order_id\n" +
			"join mst_md_drug_prescription d on (d.drug_id = po.drug_id)\n" +
			"where d.generic_drug_name like 'Nicotine%'\n" +
			") dn on (p.patient_id  = dn.patient_id )\n" +
			"left outer join (\n" +
			"select ppo.patient_id, d.generic_drug_name as varenicline_drug  from mst_om_prescription_patient_order ppo\n" +
			"join mst_om_prescription_order po on ppo.patient_order_id = po.patient_order_id\n" +
			"join mst_md_drug_prescription d on (d.drug_id = po.drug_id)\n" +
			"where d.generic_drug_name like 'Varenicline%'\n" +
			") dv on (p.patient_id  = dv.patient_id )\n" +
			"where  co.type = 69 \n" +
			" and( pv.visit_id NOT IN\n" +
			"        (select r.visit_Id from report.rpt_nontpchims_nhph012_src_registry r , TRX_PM_PATIENT_VISIT v where v.visit_id=r.visit_Id and\n" +
			"          ((v.updated_At is not null AND v.updated_At = r.updated_At) or (v.updated_At is null AND v.created_At=r.updated_At))\n" +
			"         )\n" +
			") "
	    );
	
	StringBuilder strCount=new StringBuilder();
	strCount.append("select count(*) " + strBody);
	
	StringBuilder strQuery=new StringBuilder();

	// TODO : need to change
	strQuery.append("select  pv.visit_id, p.patient_id, ci.component_id, sta.state_id,  sta.state_name, dst.district_id, dst.district_name,\n" +
			"f.facility_id, f.facility_name  , et.ethnic_group_name ,\n" +
			"EXTRACT(YEAR from age(pv.created_at , p.date_of_birth) ) as age,\n" +
			"g.gender_id, g.gender_name, el.status as enrolment_status,\n" +
		//	"--ess.id ,ess.actual_date,\n" +
			"ess.status as education_session_status, ess.activity , ess.item_id, dn.nicotine_drug, dv.varenicline_drug, pv.created_at "
	    + strBody 
	    + " order by 1,2,3" );
	

	LOGGER.info("strCount is "+ strCount.toString());
	LOGGER.info("strQuery is "+ strQuery.toString());
	
	long totalRecords=0;
	Query queryTot = entityManager.createNativeQuery(strCount.toString());
	BigInteger cResult = (BigInteger) queryTot.getSingleResult();
	if (cResult != null) {
	  totalRecords = cResult.longValue();
	}
	
	int processedRecords=0;
	while(processedRecords < totalRecords){
	  Query query = entityManager.createNativeQuery(strQuery.toString());
	  query.setFirstResult(0);
	  query.setMaxResults(maxFetchSize);
	  
	  List<Object[]> listResult = (List<Object[]>) query.getResultList();
	  
	  Timestamp createdAt= null;
	  Timestamp updatedAt= null;
	  for (Object[] obj : listResult) {
	      	${entityClass} ${entityInstance}Ins= new ${entityClass}();

## get the key field name
#foreach($field in $entity.keyAttributes)
#if ($field.setter)    
 #set( $keyFieldSetter = $field.setter)
#end
#end

#foreach($field in $entity.attributes)
#if ($field.setter)  
    ## check if key field then getLong
    #if ($keyFieldSetter ==  $field.setter ) 
	       ${entityInstance}Ins.${field.setter}(getLong(obj[$foreach.index]));
		#else
		     ${entityInstance}Ins.${field.setter}(get${field.type}(obj[$foreach.index]));
    #end
#end
#end
		
/*		

	createdAt= getTimestamp(obj[9]);
	updatedAt= getTimestamp(obj[10]);


	*/
	      	${entityInstance}Repository.save(${entityInstance}Ins);
		    //TODO : change 
		${entityClass}SourceRegister ${entityInstance}SourceRegistr = ${entityInstance}SourceRegisterRepo.findOne(${entityInstance}Ins.getVisitId());
		if(${entityInstance}SourceRegistr == null) {
		  ${entityInstance}SourceRegistr = new ${entityClass}SourceRegister();
			//TODO : change 
		  ${entityInstance}SourceRegistr.setVisitId(${entityInstance}Ins.getVisitId());
		} 
		if(updatedAt != null){
		  ${entityInstance}SourceRegistr.setUpdatedAt(updatedAt );
		} else {
		  ${entityInstance}SourceRegistr.setUpdatedAt(createdAt);
		}
		${entityInstance}SourceRegisterRepo.save(${entityInstance}SourceRegistr);
		    
	    }
	  processedRecords++;
	}

    }
        
    private String getString(Object object) {
	String result = "";
	if (null != object && object.getClass().getClass().isInstance(String.class)) {
	    result = object.toString();
	}
	return result;
  }

  private Date getDate(Object object) {
	Date result = null;
	if (null != object && object instanceof LocalDate) {
	    result = (Date) object;
	} else if (null != object && object instanceof Date) {
	    result = (Date) object;
	}
	return result;
  }

  private Long getLong(Object object) {
	Long result = 0L;
	if (null != object && object instanceof BigDecimal) {
	    result = ((Number) object).longValue();
	} else if (null != object && object instanceof BigInteger) {
	    BigInteger resulti = (BigInteger) object;
	    result = resulti.longValue();
	} else if (null != object && object instanceof Integer) {
	    Integer resulti = (Integer) object;
	    result = resulti.longValue();
	}
	return result;
  }
  
  private Timestamp getTimestamp(Object object) {
	Date result = null;
	if (null != object && object instanceof LocalDate) {
	   result = (Date) object;
	} else if (null != object && object instanceof Date) {
	    result = (Date) object;
	}
	Timestamp ts= null;
	if(null != result){
	    ts = new Timestamp(result.getTime());
	}
	return ts;
  }   
    private Integer getMonth(Date date){
	Calendar cal = Calendar.getInstance();
	cal.setTime(date);
	return cal.get(Calendar.MONTH);
  }

  private Integer getYear(Date date){
	Calendar cal = Calendar.getInstance();
	cal.setTime(date);
	return cal.get(Calendar.YEAR);
  }

  @Override
  public String getReportCode() {
    return "${entityCaps}";
  }

}
